<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d1p1="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:lex="http://wpflocalizeextension.codeplex.com"
                    xmlns:viewUtil="clr-namespace:Ada.UI.Wpf.TableIndexViewer.ViewUtil;assembly=Ada.UI.Wpf.TableIndexViewer"
                    xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:common="clr-namespace:Ra.Common.Wpf;assembly=Ra.Common.Wpf"
                    xmlns:fieldCheaterViewer="clr-namespace:Ada.UI.Wpf.TableIndexViewer.Views.FieldCheaterViewer"
                    d1p1:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary
            Source="pack://application:,,,/Ada.UI.Wpf.TableIndexViewer.Views;component/ViewUtil/ViewUtilsResources.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <viewUtil:ViewModelLocator x:Key="Locator" d:IsDataSource="True" />

    <Style x:Key="CollapsedOnEmpty" TargetType="FrameworkElement">
        <Setter Property="Visibility" Value="Collapsed" />
    </Style>


    <ToolTip x:Key="FieldCheaterToolTip"
             MaxWidth="300"
             x:Shared="True">
        <fieldCheaterViewer:FieldCheaterViewer
            DataContext="{Binding Converter={StaticResource ToFieldCheaterConverter}, Mode=OneWay}" />
    </ToolTip>

    <Style x:Key="TextBoxInErrorStyle" TargetType="{x:Type TextBox}">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
                        Value="{Binding (Validation.Errors)[0].ErrorContent, RelativeSource={x:Static RelativeSource.Self}}" />
                <Setter Property="Background" Value="Red" />
            </Trigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="{x:Type lex:EnumComboBox}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid>
                        <lex:LocProxy Source="{Binding}" x:Name="Proxy" PrependType="True" />
                        <TextBlock Text="{Binding Result, ElementName=Proxy}" Margin="2" FontWeight="Normal" />
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="MarkableLabel" TargetType="{x:Type TextBox}">
        <Setter Property="IsManipulationEnabled" Value="False" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="TextWrapping" Value="Wrap" />
    </Style>


    <!-- This scrollbar template simply swaps the LineDown and LineDown commands (and removes the clutter in the middle -->
    <ControlTemplate x:Key="UpsideDownScrollBarControlTemplate" TargetType="{x:Type ScrollBar}">
        <Grid x:Name="Bg" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Grid.RowDefinitions>
                <RowDefinition
                    MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
                <RowDefinition Height="1E-05*" />
                <RowDefinition
                    MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}" />
            </Grid.RowDefinitions>
            <RepeatButton Command="ScrollBar.LineDownCommand" IsEnabled="{TemplateBinding IsMouseOver}"
                          themes:ScrollChrome.ScrollGlyph="UpArrow">
                <RepeatButton.Style>
                    <Style TargetType="{x:Type RepeatButton}">
                        <Setter Property="OverridesDefaultStyle" Value="True" />
                        <Setter Property="Focusable" Value="False" />
                        <Setter Property="IsTabStop" Value="False" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                    <themes:ScrollChrome x:Name="Chrome"
                                                         RenderMouseOver="{TemplateBinding IsMouseOver}"
                                                         RenderPressed="{TemplateBinding IsPressed}"
                                                         SnapsToDevicePixels="True"
                                                         themes:ScrollChrome.ScrollGlyph="{TemplateBinding themes:ScrollChrome.ScrollGlyph}" />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </RepeatButton.Style>
            </RepeatButton>
            <RepeatButton Command="ScrollBar.LineUpCommand" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="2"
                          themes:ScrollChrome.ScrollGlyph="DownArrow">
                <RepeatButton.Style>
                    <Style TargetType="{x:Type RepeatButton}">
                        <Setter Property="OverridesDefaultStyle" Value="True" />
                        <Setter Property="Focusable" Value="False" />
                        <Setter Property="IsTabStop" Value="False" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type RepeatButton}">
                                    <themes:ScrollChrome x:Name="Chrome"
                                                         RenderMouseOver="{TemplateBinding IsMouseOver}"
                                                         RenderPressed="{TemplateBinding IsPressed}"
                                                         SnapsToDevicePixels="True"
                                                         themes:ScrollChrome.ScrollGlyph="{TemplateBinding themes:ScrollChrome.ScrollGlyph}" />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </RepeatButton.Style>
            </RepeatButton>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="Bg" Value="#FFF4F4F4" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style x:Key="ListBoxSubItemWithSeperator" TargetType="ListBoxItem">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <DockPanel LastChildFill="True">
                        <Separator x:Name="Separator" DockPanel.Dock="Top"
                                   BorderBrush="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                                   BorderThickness="2" Margin="4,0,4,0" />
                        <Border x:Name="Border" SnapsToDevicePixels="true">
                            <ContentPresenter VerticalAlignment="Center" />
                        </Border>
                    </DockPanel>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource PreviousData}}" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Separator" Value="Collapsed" />
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="Control.IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Border" Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Geometry x:Key="DownArrowGeometry">M 0 0 L 3.5 4 L 7 0 Z</Geometry>

    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="#FF3C7FB1" />
    <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="Transparent" />
    <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="#222" />
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="#FF526C7B" />
    <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="Transparent" />
    <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="#FF003366" />
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="DarkGray" />
    <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="Transparent" />
    <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="#666" />
    <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="Transparent" />
    <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="DarkGray" />
    <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="#666" />
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="19" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Ellipse x:Name="circle" Fill="{StaticResource Expander.Static.Circle.Fill}"
                                     HorizontalAlignment="Center" Height="19"
                                     Stroke="{StaticResource Expander.Static.Circle.Stroke}" VerticalAlignment="Center"
                                     Width="19" />
                            <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" HorizontalAlignment="Center"
                                  SnapsToDevicePixels="false" Stroke="{StaticResource Expander.Static.Arrow.Stroke}"
                                  StrokeThickness="2" VerticalAlignment="Center" />
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="4,0,0,0"
                                              RecognizesAccessKey="True" SnapsToDevicePixels="True"
                                              VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M 1,4.5  L 4.5,1  L 8,4.5" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Stroke" TargetName="circle"
                                    Value="{StaticResource Expander.MouseOver.Circle.Stroke}" />
                            <Setter Property="Fill" TargetName="circle"
                                    Value="{StaticResource Expander.MouseOver.Circle.Fill}" />
                            <Setter Property="Stroke" TargetName="arrow"
                                    Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Stroke" TargetName="circle"
                                    Value="{StaticResource Expander.Pressed.Circle.Stroke}" />
                            <Setter Property="StrokeThickness" TargetName="circle" Value="1.5" />
                            <Setter Property="Fill" TargetName="circle"
                                    Value="{StaticResource Expander.Pressed.Circle.Fill}" />
                            <Setter Property="Stroke" TargetName="arrow"
                                    Value="{StaticResource Expander.Pressed.Arrow.Stroke}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Stroke" TargetName="circle"
                                    Value="{StaticResource Expander.Disabled.Circle.Stroke}" />
                            <Setter Property="Fill" TargetName="circle"
                                    Value="{StaticResource Expander.Disabled.Circle.Fill}" />
                            <Setter Property="Stroke" TargetName="arrow"
                                    Value="{StaticResource Expander.Disabled.Arrow.Stroke}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="StupidComboBoxControlTemplate" TargetType="{x:Type common:StupidComboBox}">
        <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                  Width="0" />
            </Grid.ColumnDefinitions>
            <Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2"
                   IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Margin="1"
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   Placement="Bottom">
                <themes:SystemDropShadowChrome x:Name="Shdw" Color="Transparent"
                                               MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                               MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                    <Border x:Name="DropDownBorder"
                            BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}"
                            BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="OpaqueRect"
                                               Fill="{Binding Background, ElementName=DropDownBorder}"
                                               Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                               Width="{Binding ActualWidth, ElementName=DropDownBorder}" />
                                </Canvas>
                                <ContentPresenter Content="{TemplateBinding Popup}" />
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </themes:SystemDropShadowChrome>
            </Popup>
            <ToggleButton BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}"
                          Grid.ColumnSpan="2"
                          IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                <ToggleButton.Style>
                    <Style TargetType="{x:Type ToggleButton}">
                        <Setter Property="OverridesDefaultStyle" Value="True" />
                        <Setter Property="IsTabStop" Value="False" />
                        <Setter Property="Focusable" Value="False" />
                        <Setter Property="ClickMode" Value="Press" />
                        <Setter Property="Background" Value="Transparent" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <themes:ButtonChrome x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}"
                                                         Background="{TemplateBinding Background}"
                                                         RenderMouseOver="{TemplateBinding IsMouseOver}"
                                                         RenderPressed="{TemplateBinding IsPressed}"
                                                         SnapsToDevicePixels="True">
                                        <Grid HorizontalAlignment="Right"
                                              Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                            <Path x:Name="Arrow" Data="M0,0L3.5,4 7,0z" Fill="Black"
                                                  HorizontalAlignment="Center" Margin="3,1,0,0"
                                                  VerticalAlignment="Center" />
                                        </Grid>
                                    </themes:ButtonChrome>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsChecked" Value="True">
                                            <Setter Property="RenderPressed" TargetName="Chrome" Value="True" />
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="False">
                                            <Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ToggleButton.Style>
            </ToggleButton>
            <ContentPresenter Content="{TemplateBinding Child}" />
        </Grid>
    </ControlTemplate>


</ResourceDictionary>